version: '3'

vars:
  JEKYLL_IMAGE: ghcr.io/aksw/jekyll-rdf:4.0.4
  BASE_IRI: '{{.BASE_IRI | default "https://dataweek.de/d2r2-22/"}}'
  WORKING_DIRECTORY: '{{.PWD}}'
  TARGET: _site
  BUILD_WATCH_FILES: find . -name '*' -not -path "./.git/*" -not -path "./.git" -not -path "./.jekyll-cache/*" -not -path "./.jekyll-cache"

tasks:
  sources:get-vol-xxx:
    - |
      echo \
      https://ceur-ws.org/Vol-XXX/index.html \
      https://ceur-ws.org/ceur-ws.css \
      https://ceur-ws.org/ceurws-bg.png \
      https://ceur-ws.org/CEUR-WS-logo.png \
      https://ceur-ws.org/cc-by_100x35.png \
      https://ceur-ws.org/ceurws-bullet-6x12.png \
      https://ceur-ws.org/favicon.ico \
      https://ceur-ws.org/CEUR-WS-logo-blue.png \
      | xargs -n 1 curl -O
    - mv index.html Vol-XXX/index.html

  check:
    desc: Check the correctness of the HTML
    cmds:
      - docker run -it --rm -v {{.WORKING_DIRECTORY}}/_site:/workspace ghcr.io/validator/validator:latest vnu-runtime-image/bin/vnu /workspace/Vol-XXX/index.html

  tidy:
    desc: Tidy the HTML output with html tidy (https://github.com/htacg/tidy-html5/)
    cmds:
      - tidy -m -i -w 0 --output-encoding ascii _site/Vol-XXX/index.html

  build:
    desc: Build the site locally
    cmds:
      - |
        docker run --rm \
        --workdir /workspace \
        -v {{.WORKING_DIRECTORY}}:/workspace \
        -e TZ=Europe/Berlin {{.JEKYLL_USER_ARG}} -e BUNDLE_PATH=.vendor \
        {{.JEKYLL_IMAGE}} jekyll build -d {{.TARGET}}

  serve:
    desc: Serve the locally built site
    cmds:
      - python -m http.server --directory {{.TARGET}}

  watch:
    desc: Serve the page and rebuild it on changes
    deps:
      - task: serve
      - task: build:watch
    cmds:
      - echo "Terminate"

  build:watch:
    desc: Watch for changes in the directory and rebuild the page, should be combined with task serve in a second terminal
    cmds:
      - '{{.BUILD_WATCH_FILES}} | entr task build'

  check:graph-serialization:
    desc: Verify the graphs syntax is correct
    cmds:
      - rapper -c -i turtle graph.ttl

  graph:
    desc: Join the event.ttl and paper.ttl graphs to the graph.ttl which is used to build the site
    cmds:
      - cat event.ttl paper.ttl | rapper -i turtle -o turtle - {{.BASE_IRI}} > graph.ttl

  graph:check:
    desc: Check all graph files
    cmds:
      - rapper -i turtle -c event.ttl
      - rapper -i turtle -c paper.ttl
      - rapper -i turtle -c graph.ttl

  graph:get-program:
    desc: Get the program from cmem and join it with the event graph (you need the correct credentials for that)
    cmds:
      - cmemc -c aksw.eccenca.dev workflow execute --wait D2R222_27c8844a9d9959b5:238cc3fb-389b-439c-9b7b-d492305db2d3_ProgrammTransformation
      - cmemc -c aksw.eccenca.dev graph export {{.BASE_IRI}} | rapper -i turtle -o turtle - {{.BASE_IRI}} > paper.ttl
      - task: graph
